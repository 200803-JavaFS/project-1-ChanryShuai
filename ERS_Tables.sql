DROP table IF EXISTS ers_reimbursement_status CASCADE;
DROP TABLE IF EXISTS ers_reimbursement_type CASCADE;
DROP table IF EXISTS ers_user_roles CASCADE;
DROP TABLE IF EXISTS ers_users CASCADE;
DROP TABLE IF EXISTS ers_reimbursement CASCADE;

CREATE TABLE ERS_REIMBURSEMENT_STATUS (
REIMB_STATUS_ID serial PRIMARY KEY,
REIMB_STATUS	VARCHAR(20) NOT NULL
);



CREATE TABLE ERS_REIMBURSEMENT_TYPE(
REIMB_TYPE_ID	serial PRIMARY KEY,
REIMB_TYPE		VARCHAR(10) NOT NULL
);


CREATE TABLE ERS_USER_ROLES(
ERS_USER_ROLE_ID serial PRIMARY KEY,
USER_ROLE 		 VARCHAR(10) NOT NULL
);

CREATE TABLE ERS_USERS(
ERS_USERS_ID serial PRIMARY KEY,
ERS_USERNAME VARCHAR(50) UNIQUE NOT NULL,
ERS_PASSWORD VARCHAR(50) NOT NULL,
USER_FIRST_NAME VARCHAR(100) NOT NULL,
USER_LAST_NAME VARCHAR(100) NOT NULL,
USER_EMAIL VARCHAR(150) UNIQUE NOT NULL,
USER_ROLE_ID INTEGER NOT NULL REFERENCES ERS_USER_ROLES(ERS_USER_ROLE_ID)
);

CREATE OR REPLACE FUNCTION trigger_set_timestamp() RETURNS TRIGGER 
AS $$
BEGIN 
	NEW.update_at = NOW();
	RETURN NEW;
END;
$$ LANGUAGE plpgsql; 


CREATE TABLE ERS_REIMBURSEMENT(
REIMB_ID SERIAL PRIMARY KEY,
REIMB_AMOUNT numeric NOT NULL,
REIMB_SUBMITTED TIMESTAMP NOT NULL,
REIMB_RESOLVED TIMESTAMP,
REIMB_DESCRIPTION VARCHAR(250),
REIMB_RECEIPT BYTEA,
REIMB_AUTHOR INTEGER NOT NULL REFERENCES ERS_USERS(ERS_USERS_ID),
REIMB_RESOLVER INTEGER REFERENCES ERS_USERS(ERS_USERS_ID),
REIMB_STATUS_ID INTEGER NOT NULL REFERENCES ERS_REIMBURSEMENT_STATUS(REIMB_STATUS_ID),
REIMB_TYPE_ID INTEGER NOT NULL REFERENCES ERS_REIMBURSEMENT_TYPE(REIMB_TYPE_ID)
);


CREATE TRIGGER set_timestamp 
BEFORE UPDATE ON ers_reimbursement
FOR EACH ROW
EXECUTE PROCEDURE trigger_set_timestamp();


INSERT INTO ers_users (ers_username, ers_password, user_first_name , user_last_name , user_email )